numeric_sum <- numeric_sum %>%
mutate(across(c(Carat, Table, x), ~ round(as.numeric(.), 4)))
kable(numeric_sum, caption = "Numerical Summary of Quantitative Predictor Variables", row.names=FALSE)
carat_hist <- ggplot(diamonds_cleaned, aes(x=carat)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of Carat", x="Carat", y="Frequency")
table_hist <- ggplot(diamonds_cleaned, aes(x=table)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of Table", x="Table", y="Frequency")
x_hist <- ggplot(diamonds_cleaned, aes(x=x)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of x (Length)", x="x", y="Frequency")
(carat_hist | table_hist | x_hist)
##-----------------------------------------------------------------------------------------------##
## Frequency & Proportion for each 'color' level
color_freq <- table(diamonds_cleaned$color)
color_prop <- prop.table(color_freq)
## Combine into a data frame
color_catego_df <- data.frame(
Color=names(color_freq),
Frequency=as.numeric(color_freq),
Proportion=round(as.numeric(color_prop), 4)
)
kable(color_catego_df, caption="Numerical Summary of 'Color' Predictor")
## Frequency & Proportion for each 'clarity' level
clarity_freq <- table(diamonds_cleaned$clarity)
clarity_prop <- prop.table(clarity_freq)
## Combine into a data frame
clarity_catego_df <- data.frame(
Clarity=names(clarity_freq),
Frequency=as.numeric(clarity_freq),
Proportion=round(as.numeric(clarity_prop), 4)
)
kable(clarity_catego_df, caption="Numerical Summary of 'Clarity' Predictor")
## Graphical Summary of Predictor Variables
## Boxplot confirms that color is not constant & shows some variation in price.
## Can use as predictor in modeling price.
price_color_box <- ggplot(data=diamonds_cleaned, aes(x=color, y=price)) +
geom_boxplot(fill="lightblue", color="black") +
labs(title="Boxplot of Price by Color",
x="Color", y="Price")
## Boxplot confirms that clarity does is not constant & shows meaningful variation in price.
## Can use as predictor in modeling price.
price_clarity_box <- ggplot(data=diamonds_cleaned, aes(x=clarity, y=price)) +
geom_boxplot(fill="lightblue", color="black") +
labs(title="Boxplot of Price by Clarity",
x="Clarity", y="Price")
(price_color_box | price_clarity_box)
## Numerical Summary of Quantitative Predictor Variables
## Table & Transpose
numeric_sum <- diamonds_cleaned %>%
summarise(
Min=c(min(carat), min(table), min(x)),
Q1=c(quantile(carat, 0.25), quantile(table, 0.25), quantile(x, 0.25)),
Median=c(median(carat), median(table), median(x)),
Mode=c(Mode(carat), Mode(table), Mode(x)),
Mean=c(mean(carat), mean(table), mean(x)),
StandardDeviation=c(sd(carat), sd(table), sd(x)),
Q3=c(quantile(carat,0.75), quantile(table,0.75), quantile(x,0.75)),
Max=c(max(carat), max(table), max(x))
) %>%
t() %>%
as.data.frame()
# Name cols & row labels
colnames(numeric_sum) <- c("Carat", "Table", "x")
numeric_sum$Statistic <- c("Minimum", "1st Quartile", "Median", "Mode", "Mean", "Standard Deviation", "3rd Quartile", "Maximum")
## Reorder cols
numeric_sum <- numeric_sum[, c("Statistic", "Carat", "Table", "x")]
# Round values
numeric_sum <- numeric_sum %>%
mutate(across(c(Carat, Table, x), ~ round(as.numeric(.), 4)))
kable(numeric_sum, caption = "Numerical Summary of Quantitative Predictor Variables", row.names=FALSE)
carat_hist <- ggplot(diamonds_cleaned, aes(x=carat)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of Carat", x="Carat", y="Frequency")
table_hist <- ggplot(diamonds_cleaned, aes(x=table)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of Table", x="Table", y="Frequency")
x_hist <- ggplot(diamonds_cleaned, aes(x=x)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of x (Length)", x="x", y="Frequency")
(carat_hist | table_hist | x_hist)
##-----------------------------------------------------------------------------------------------##
## Frequency & Proportion for each 'color' level
color_freq <- table(diamonds_cleaned$color)
color_prop <- prop.table(color_freq)
## Combine into a data frame
color_catego_df <- data.frame(
Color=names(color_freq),
Frequency=as.numeric(color_freq),
Proportion=as.numeric(color_prop*100)
)
kable(color_catego_df, caption="Numerical Summary of 'Color' Predictor")
## Frequency & Proportion for each 'clarity' level
clarity_freq <- table(diamonds_cleaned$clarity)
clarity_prop <- prop.table(clarity_freq)
## Combine into a data frame
clarity_catego_df <- data.frame(
Clarity=names(clarity_freq),
Frequency=as.numeric(clarity_freq),
Proportion=round(as.numeric(clarity_prop), 4)
)
kable(clarity_catego_df, caption="Numerical Summary of 'Clarity' Predictor")
## Graphical Summary of Predictor Variables
## Boxplot confirms that color is not constant & shows some variation in price.
## Can use as predictor in modeling price.
price_color_box <- ggplot(data=diamonds_cleaned, aes(x=color, y=price)) +
geom_boxplot(fill="lightblue", color="black") +
labs(title="Boxplot of Price by Color",
x="Color", y="Price")
## Boxplot confirms that clarity does is not constant & shows meaningful variation in price.
## Can use as predictor in modeling price.
price_clarity_box <- ggplot(data=diamonds_cleaned, aes(x=clarity, y=price)) +
geom_boxplot(fill="lightblue", color="black") +
labs(title="Boxplot of Price by Clarity",
x="Clarity", y="Price")
(price_color_box | price_clarity_box)
## Numerical Summary of Quantitative Predictor Variables
## Table & Transpose
numeric_sum <- diamonds_cleaned %>%
summarise(
Min=c(min(carat), min(table), min(x)),
Q1=c(quantile(carat, 0.25), quantile(table, 0.25), quantile(x, 0.25)),
Median=c(median(carat), median(table), median(x)),
Mode=c(Mode(carat), Mode(table), Mode(x)),
Mean=c(mean(carat), mean(table), mean(x)),
StandardDeviation=c(sd(carat), sd(table), sd(x)),
Q3=c(quantile(carat,0.75), quantile(table,0.75), quantile(x,0.75)),
Max=c(max(carat), max(table), max(x))
) %>%
t() %>%
as.data.frame()
# Name cols & row labels
colnames(numeric_sum) <- c("Carat", "Table", "x")
numeric_sum$Statistic <- c("Minimum", "1st Quartile", "Median", "Mode", "Mean", "Standard Deviation", "3rd Quartile", "Maximum")
## Reorder cols
numeric_sum <- numeric_sum[, c("Statistic", "Carat", "Table", "x")]
# Round values
numeric_sum <- numeric_sum %>%
mutate(across(c(Carat, Table, x), ~ round(as.numeric(.), 4)))
kable(numeric_sum, caption = "Numerical Summary of Quantitative Predictor Variables", row.names=FALSE)
carat_hist <- ggplot(diamonds_cleaned, aes(x=carat)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of Carat", x="Carat", y="Frequency")
table_hist <- ggplot(diamonds_cleaned, aes(x=table)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of Table", x="Table", y="Frequency")
x_hist <- ggplot(diamonds_cleaned, aes(x=x)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of x (Length)", x="x", y="Frequency")
(carat_hist | table_hist | x_hist)
##-----------------------------------------------------------------------------------------------##
## Frequency & Proportion for each 'color' level
color_freq <- table(diamonds_cleaned$color)
color_prop <- prop.table(color_freq)
## Combine into a data frame
color_catego_df <- data.frame(
Color=names(color_freq),
Frequency=as.numeric(color_freq),
Proportion=round(as.numeric(color_prop)*100, 3)
)
kable(color_catego_df, caption="Numerical Summary of 'Color' Predictor")
## Frequency & Proportion for each 'clarity' level
clarity_freq <- table(diamonds_cleaned$clarity)
clarity_prop <- prop.table(clarity_freq)
## Combine into a data frame
clarity_catego_df <- data.frame(
Clarity=names(clarity_freq),
Frequency=as.numeric(clarity_freq),
Proportion=round(as.numeric(clarity_prop), 4)
)
kable(clarity_catego_df, caption="Numerical Summary of 'Clarity' Predictor")
## Graphical Summary of Predictor Variables
## Boxplot confirms that color is not constant & shows some variation in price.
## Can use as predictor in modeling price.
price_color_box <- ggplot(data=diamonds_cleaned, aes(x=color, y=price)) +
geom_boxplot(fill="lightblue", color="black") +
labs(title="Boxplot of Price by Color",
x="Color", y="Price")
## Boxplot confirms that clarity does is not constant & shows meaningful variation in price.
## Can use as predictor in modeling price.
price_clarity_box <- ggplot(data=diamonds_cleaned, aes(x=clarity, y=price)) +
geom_boxplot(fill="lightblue", color="black") +
labs(title="Boxplot of Price by Clarity",
x="Clarity", y="Price")
(price_color_box | price_clarity_box)
## Numerical Summary of Quantitative Predictor Variables
## Table & Transpose
numeric_sum <- diamonds_cleaned %>%
summarise(
Min=c(min(carat), min(table), min(x)),
Q1=c(quantile(carat, 0.25), quantile(table, 0.25), quantile(x, 0.25)),
Median=c(median(carat), median(table), median(x)),
Mode=c(Mode(carat), Mode(table), Mode(x)),
Mean=c(mean(carat), mean(table), mean(x)),
StandardDeviation=c(sd(carat), sd(table), sd(x)),
Q3=c(quantile(carat,0.75), quantile(table,0.75), quantile(x,0.75)),
Max=c(max(carat), max(table), max(x))
) %>%
t() %>%
as.data.frame()
# Name cols & row labels
colnames(numeric_sum) <- c("Carat", "Table", "x")
numeric_sum$Statistic <- c("Minimum", "1st Quartile", "Median", "Mode", "Mean", "Standard Deviation", "3rd Quartile", "Maximum")
## Reorder cols
numeric_sum <- numeric_sum[, c("Statistic", "Carat", "Table", "x")]
# Round values
numeric_sum <- numeric_sum %>%
mutate(across(c(Carat, Table, x), ~ round(as.numeric(.), 4)))
kable(numeric_sum, caption = "Numerical Summary of Quantitative Predictor Variables", row.names=FALSE)
carat_hist <- ggplot(diamonds_cleaned, aes(x=carat)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of Carat", x="Carat", y="Frequency")
table_hist <- ggplot(diamonds_cleaned, aes(x=table)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of Table", x="Table", y="Frequency")
x_hist <- ggplot(diamonds_cleaned, aes(x=x)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of x (Length)", x="x", y="Frequency")
(carat_hist | table_hist | x_hist)
##-----------------------------------------------------------------------------------------------##
## Frequency & Percentage for each 'color' level
color_freq <- table(diamonds_cleaned$color)
color_prop <- prop.table(color_freq)
## Combine into a data frame
color_catego_df <- data.frame(
Color=names(color_freq),
Frequency=as.numeric(color_freq),
Percentage=round(as.numeric(color_prop)*100, 3)
)
kable(color_catego_df, caption="Numerical Summary of 'Color' Predictor")
## Frequency & Proportion for each 'clarity' level
clarity_freq <- table(diamonds_cleaned$clarity)
clarity_prop <- prop.table(clarity_freq)
## Combine into a data frame
clarity_catego_df <- data.frame(
Clarity=names(clarity_freq),
Frequency=as.numeric(clarity_freq),
Percentage=round(as.numeric(clarity_prop)*100, 3)
)
kable(clarity_catego_df, caption="Numerical Summary of 'Clarity' Predictor")
## Graphical Summary of Predictor Variables
## Boxplot confirms that color is not constant & shows some variation in price.
## Can use as predictor in modeling price.
price_color_box <- ggplot(data=diamonds_cleaned, aes(x=color, y=price)) +
geom_boxplot(fill="lightblue", color="black") +
labs(title="Boxplot of Price by Color",
x="Color", y="Price")
## Boxplot confirms that clarity does is not constant & shows meaningful variation in price.
## Can use as predictor in modeling price.
price_clarity_box <- ggplot(data=diamonds_cleaned, aes(x=clarity, y=price)) +
geom_boxplot(fill="lightblue", color="black") +
labs(title="Boxplot of Price by Clarity",
x="Clarity", y="Price")
(price_color_box | price_clarity_box)
unique(diamonds_cleaned$clairty)
unique(diamonds_cleaned$clarity)
unique(diamonds_cleaned$color)
(resid_fitted | price_fitted | price_carat) /
(price_color | price_clarity | price_table) /
(price_x | sresid_hist | sresid_qq)
## 1(b) Response vs Predictor Values Plot
## predictors <- c("carat", "color", "clarity", "table", "x")
## price_predictors <-
##   for (x_i in predictors) {
##   print(
##     ggplot(data=diamonds_cleaned, aes(x=!!sym(x_i), y=price)) +
##       geom_point(alpha=0.2) +
##       geom_smooth(method="lm", color="blue", se = FALSE) +
##       labs(title=paste("Price vs", x_i))
##   )
## }
## !!sym(x_i): Converts str var name into a symbol & unquotes it for aes() to use it directly.
price_carat <- ggplot(data=diamonds_cleaned, aes(x=carat, y=price)) +
geom_point(alpha=0.2) +
geom_smooth(method="lm", color="blue", se=FALSE) +
labs(title="Price vs Carat")
price_color <- ggplot(data=diamonds_cleaned, aes(x=color, y=price)) +
geom_point(alpha=0.2) +
geom_smooth(method="lm", color="blue", se=FALSE) +
labs(title="Price vs Color")
price_clarity <- ggplot(data=diamonds_cleaned, aes(x=clarity, y=price)) +
geom_point(alpha=0.2) +
geom_smooth(method="lm", color="blue", se=FALSE) +
labs(title="Price vs Clarity")
price_table <- ggplot(data=diamonds_cleaned, aes(x=table, y=price)) +
geom_point(alpha=0.2) +
geom_smooth(method="lm", color="blue", se=FALSE) +
labs(title="Price vs Table")
price_x <- ggplot(data=diamonds_cleaned, aes(x=x, y=price)) +
geom_point(alpha=0.2) +
geom_smooth(method="lm", color="blue", se=FALSE) +
labs(title="Price vs x")
## 2(a) Histogram of Standardized Residuals
std_resid <- rstandard(fit)
sresid_hist <- ggplot(data=data.frame(std_resid), aes(x=std_resid)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of Standardized Residuals",
x="Standardized Residuals", y="Frequency")
## Hides both code & output in knitted document
library(tidyverse)  ## For data wrangling & plotting
library(kableExtra)
library(DescTools)
library(patchwork)
library(knitr)
library(skimr)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)  ## Globally suppress all code, messages, & warnings
## load diamonds dataset
diamonds <- read_csv("./dataset/original_diamonds_dataset.csv")
## list.files("./dataset")
## getwd()
## Data Cleaning: Remove predictor variables we don't need: 1st col, cut, depth, y, z
diamonds_cleaned <- diamonds %>% select(-...1, -cut, -depth, -y, -z)
## head(diamonds_cleaned)
write_csv(diamonds_cleaned, "./dataset/diamonds_cleaned.csv")
## summary(diamonds_cleaned)
## 2(a) Histogram of Standardized Residuals
std_resid <- rstandard(fit)
sresid_hist <- ggplot(data=data.frame(std_resid), aes(x=std_resid)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of Standardized Residuals",
x="Standardized Residuals", y="Frequency")
## Hides both code & output in knitted document
library(tidyverse)  ## For data wrangling & plotting
library(kableExtra)
library(DescTools)
library(patchwork)
library(knitr)
library(skimr)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)  ## Globally suppress all code, messages, & warnings
## load diamonds dataset
diamonds <- read_csv("./dataset/original_diamonds_dataset.csv")
## list.files("./dataset")
## getwd()
## Data Cleaning: Remove predictor variables we don't need: 1st col, cut, depth, y, z
diamonds_cleaned <- diamonds %>% select(-...1, -cut, -depth, -y, -z)
## head(diamonds_cleaned)
write_csv(diamonds_cleaned, "./dataset/diamonds_cleaned.csv")
## summary(diamonds_cleaned)
## Numerical Summary of Response Variable
response_numeric_sum <- data.frame(
Statistic = c("Minimum", "1st Quartile", "Median", "Mode", "Mean", "Standard Deviation", "3rd Quartile", "Maximum"),
Value = c(326, 950, 2401, 605, 3933, 3989.338, 5324, 18823)
)
kable(response_numeric_sum, caption="Numerical Summary of Response Variable")
## summary(diamonds_cleaned$price)
## skim(diamonds_cleaned$price)
## Numerical Summary of Quantitative Predictor Variables
## Table & Transpose
numeric_sum <- diamonds_cleaned %>%
summarise(
Min=c(min(carat), min(table), min(x)),
Q1=c(quantile(carat, 0.25), quantile(table, 0.25), quantile(x, 0.25)),
Median=c(median(carat), median(table), median(x)),
Mode=c(Mode(carat), Mode(table), Mode(x)),
Mean=c(mean(carat), mean(table), mean(x)),
StandardDeviation=c(sd(carat), sd(table), sd(x)),
Q3=c(quantile(carat,0.75), quantile(table,0.75), quantile(x,0.75)),
Max=c(max(carat), max(table), max(x))
) %>%
t() %>%
as.data.frame()
# Name cols & row labels
colnames(numeric_sum) <- c("Carat", "Table", "x")
numeric_sum$Statistic <- c("Minimum", "1st Quartile", "Median", "Mode", "Mean", "Standard Deviation", "3rd Quartile", "Maximum")
## Reorder cols
numeric_sum <- numeric_sum[, c("Statistic", "Carat", "Table", "x")]
# Round values
numeric_sum <- numeric_sum %>%
mutate(across(c(Carat, Table, x), ~ round(as.numeric(.), 4)))
kable(numeric_sum, caption = "Numerical Summary of Quantitative Predictor Variables", row.names=FALSE)
carat_hist <- ggplot(diamonds_cleaned, aes(x=carat)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of Carat", x="Carat", y="Frequency")
table_hist <- ggplot(diamonds_cleaned, aes(x=table)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of Table", x="Table", y="Frequency")
x_hist <- ggplot(diamonds_cleaned, aes(x=x)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of x (Length)", x="x", y="Frequency")
(carat_hist | table_hist | x_hist)
##-----------------------------------------------------------------------------------------------##
## Frequency & Percentage for each 'color' level
color_freq <- table(diamonds_cleaned$color)
color_prop <- prop.table(color_freq)
## Combine into a data frame
color_catego_df <- data.frame(
Color=names(color_freq),
Frequency=as.numeric(color_freq),
Percentage=round(as.numeric(color_prop)*100, 3)
)
kable(color_catego_df, caption="Numerical Summary of 'Color' Predictor")
## Frequency & Proportion for each 'clarity' level
clarity_freq <- table(diamonds_cleaned$clarity)
clarity_prop <- prop.table(clarity_freq)
## Combine into a data frame
clarity_catego_df <- data.frame(
Clarity=names(clarity_freq),
Frequency=as.numeric(clarity_freq),
Percentage=round(as.numeric(clarity_prop)*100, 3)
)
kable(clarity_catego_df, caption="Numerical Summary of 'Clarity' Predictor")
## Graphical Summary of Predictor Variables
## Boxplot confirms that color is not constant & shows some variation in price.
## Can use as predictor in modeling price.
price_color_box <- ggplot(data=diamonds_cleaned, aes(x=color, y=price)) +
geom_boxplot(fill="lightblue", color="black") +
labs(title="Boxplot of Price by Color",
x="Color", y="Price")
## Boxplot confirms that clarity does is not constant & shows meaningful variation in price.
## Can use as predictor in modeling price.
price_clarity_box <- ggplot(data=diamonds_cleaned, aes(x=clarity, y=price)) +
geom_boxplot(fill="lightblue", color="black") +
labs(title="Boxplot of Price by Clarity",
x="Clarity", y="Price")
(price_color_box | price_clarity_box)
## Preliminary (MLR) Model Setup
fit <- lm(price ~ carat + color + clarity + table + x, data=diamonds_cleaned)
## summary(fit)
## 1(a) Residual vs Fitted Values Plot | NOTE: Best plot among the 3 1(a)(b)(c) to check for 1st 2 assumptions
resid_fit <- data.frame(Fitted = fitted(fit), Residuals = resid(fit))
resid_fitted <- ggplot(data=resid_fit, aes(x=Fitted, y=Residuals)) +
geom_point(alpha=0.4) +  ## Transparency level to help w/ overlapping pts
geom_smooth(method = "loess", se = FALSE, color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
labs(x="Fitted Values", y="Residuals",
title="Residuals vs Fitted Values")
## 1(b) Response vs Fitted Values Plot
price_fitted <- ggplot(data=diamonds_cleaned, aes(x=fitted(fit), y=price)) +
geom_point(alpha=0.3) +  ## Transparency level to help w/ overlapping pts
geom_abline(color="blue") +
labs(x="Fitted Values", y="Actual Price",
title="Price vs Fitted Values")
## 1(b) Response vs Predictor Values Plot
## predictors <- c("carat", "color", "clarity", "table", "x")
## price_predictors <-
##   for (x_i in predictors) {
##   print(
##     ggplot(data=diamonds_cleaned, aes(x=!!sym(x_i), y=price)) +
##       geom_point(alpha=0.2) +
##       geom_smooth(method="lm", color="blue", se = FALSE) +
##       labs(title=paste("Price vs", x_i))
##   )
## }
## !!sym(x_i): Converts str var name into a symbol & unquotes it for aes() to use it directly.
price_carat <- ggplot(data=diamonds_cleaned, aes(x=carat, y=price)) +
geom_point(alpha=0.2) +
geom_smooth(method="lm", color="blue", se=FALSE) +
labs(title="Price vs Carat")
price_color <- ggplot(data=diamonds_cleaned, aes(x=color, y=price)) +
geom_point(alpha=0.2) +
geom_smooth(method="lm", color="blue", se=FALSE) +
labs(title="Price vs Color")
price_clarity <- ggplot(data=diamonds_cleaned, aes(x=clarity, y=price)) +
geom_point(alpha=0.2) +
geom_smooth(method="lm", color="blue", se=FALSE) +
labs(title="Price vs Clarity")
price_table <- ggplot(data=diamonds_cleaned, aes(x=table, y=price)) +
geom_point(alpha=0.2) +
geom_smooth(method="lm", color="blue", se=FALSE) +
labs(title="Price vs Table")
price_x <- ggplot(data=diamonds_cleaned, aes(x=x, y=price)) +
geom_point(alpha=0.2) +
geom_smooth(method="lm", color="blue", se=FALSE) +
labs(title="Price vs x")
## 2(a) Histogram of Standardized Residuals
std_resid <- rstandard(fit)
sresid_hist <- ggplot(data=data.frame(std_resid), aes(x=std_resid)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Histogram of Standardized Residuals",
x="Standardized Residuals", y="Frequency")
## Normal QQ-Plot of Standardized Residuals
sresid_qq <- ggplot(data=data.frame(std_resid), aes(sample=std_resid)) +
stat_qq(alpha=0.2) +
stat_qq_line(color="red", linetype="dashed") +
labs(title="Normal QQ-Plot of Standardized Residuals",
x="Theoretical Quantiles", y="Standardized Residuals")
(resid_fitted | price_fitted | price_carat) /
(price_color | price_clarity | price_table) /
(price_x | sresid_hist | sresid_qq)
## Numerical Summary of Coefficient Estimates
coef_esti_numeric_sum <- data.frame(
Term = c("(Intercept)", "carat", "colorE", "colorF", "colorG", "colorH", "colorI", "colorJ",
"clarityIF", "claritySI1", "claritySI2", "clarityVS1", "clarityVS2", "clarityVVS1", "clarityVVS2",
"table", "x"),
Estimate = c(-1388.839, 10945.695, -210.489, -286.752, -493.858, -993.809, -1474.570, -2387.941,
5665.892, 3894.266, 2926.092, 4845.059, 4528.148, 5309.983, 5234.228, -32.708, -900.270)
)
kable(coef_esti_numeric_sum, digits=3, caption="Numerical Summary of Coefficient Estimates")
## summary(fit)
## Hides both code & output in knitted document
library(tidyverse)  ## For data wrangling & plotting
library(kableExtra)
library(patchwork)
library(knitr)
library(skimr)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)  ## Globally suppress all code, messages, & warnings
## Hides both code & output in knitted document
library(tidyverse)  ## For data wrangling & plotting
library(kableExtra)
library(DescTools)
library(patchwork)
library(knitr)
library(skimr)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)  ## Globally suppress all code, messages, & warnings
## Pictures of color & clarity gradings
## Side-by-side example (each at 40% width)
knitr::include_graphics(c("./color_grading.png", "./clarity_grading.png"))
```{r include-images, fig.align='center', out.width='40%', fig.cap='Colour (Diamond Color Scale, n.d.) and Clarity (Diamond Clarity Guide, n.d.) Gradings for Diamonds'}
## Pictures for color & clarity gradings
knitr::include_graphics(c("./color_grading.png", "./clarity_grading.png"))
knitr::include_graphics("./clarity_grading.png")
